{"version":3,"file":"static/js/835.7f63f877.chunk.js","mappings":"4PACaA,EAAWC,EAAAA,EAAAA,IAAH,yCAIRC,EAAcD,EAAAA,EAAAA,IAAH,sBAEXE,EAAUF,EAAAA,EAAAA,IAAH,0I,SC2DpB,EA1Da,WACX,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkDE,EAAAA,EAAAA,UAAS,IAA3D,eAAOC,EAAP,KAA0BC,EAA1B,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAQC,EAAAA,EAAAA,IAAgBP,IACrBQ,MAAK,SAAAC,GAAI,OAAIA,EAAKA,IAAT,IACTD,MAAK,SAAAC,GAAI,OACRA,EAAKC,KAAI,kBAAqD,CAC5DC,GADO,EAAGA,GAEVC,cAFO,EAAOA,cAGdC,aAHO,EAAsBA,aAI7BC,UAJO,EAAoCA,UAApC,GADD,IAQTN,MAAK,SAAAC,GAAI,OAAIL,EAAqBK,EAAzB,GACb,GAAE,CAACT,KAGF,SAACJ,EAAD,UACGO,EAAkBY,OAAS,GAC1B,yBACGZ,EAAkBO,KACjB,YAAqD,IAAlDC,EAAiD,EAAjDA,GAAIC,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAClC,OACE,UAAChB,EAAD,WACoB,OAAjBe,GACC,SAACd,EAAD,CACEiB,IAAG,0CAAqCH,GACxCI,IAAKL,KAGP,SAACb,EAAD,CAASiB,I,y7KAAcC,IAAKL,KAE9B,yBACE,cACEM,KAAI,wCAAmCN,GACvCO,OAAO,SACPC,IAAI,aAHN,SAKGR,OAIL,uCAAeE,OAnBCH,EAsBrB,OAIL,0BACE,kEAKT,C,8FC/Dc,SAAeL,EAA9B,+CAAe,OAAf,oBAAe,WAAuBe,GAAvB,gGAEQC,EAAAA,EAAAA,QAAcD,GAASb,MAAK,SAAAe,GAC7C,OAAOA,EAASC,IACjB,IAJU,cAELA,EAFK,yBAKJA,GALI,gCAOXC,QAAQC,MAAR,MAPW,gF,oKCFTC,EAAY,+BACZC,EAAiB,CACrBC,OAAQ,MACRC,OAAQ,CAAEC,SAAU,SACpBC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIOC,GAAkB,kBAC1BP,GAD0B,IAE7BQ,IAAI,GAAD,OAAKT,EAAL,yBAIQU,EAAmB,SAAArC,GAAO,yBAClC4B,GADkC,IAErCQ,IAAI,GAAD,OAAKT,EAAL,kBAAwB3B,IAFU,EAO1BsC,EAAqB,SAAAC,GAAK,yBAClCX,GADkC,IAErCQ,IAAI,GAAD,OAAKT,EAAL,iBACHG,OAAQ,CACNS,MAAM,GAAD,OAAKA,GACVC,KAAM,IACNT,SAAU,UANyB,EAY1BxB,EAAkB,SAAAP,GAAO,yBACjC4B,GADiC,IAEpCQ,IAAI,GAAD,OAAKT,EAAL,kBAAwB3B,EAAxB,aAFiC,EAOzByC,EAAqB,SAAAzC,GAAO,yBACpC4B,GADoC,IAEvCQ,IAAI,GAAD,OAAKT,EAAL,kBAAwB3B,EAAxB,YACH8B,OAAQ,CAAEC,SAAU,QAASS,KAAM,MAHI,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","service/API/getData.js","service/API/options.js"],"sourcesContent":["import styled from '@emotion/styled';\nexport const BlokCast = styled.div`\n  margin: 16px;\n`;\n\nexport const GalleryCast = styled.div``;\n\nexport const Profile = styled.img`\n  max-width: 120px;\n  max-height: 120px;\n  padding-right: 24px;\n  padding-bottom: 12px;\n  object-fit: cover;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport getData from 'service/API/getData';\nimport { optionsCastByID } from 'service/API/options';\nimport { BlokCast, GalleryCast, Profile } from './Cast.styled';\nimport noimage from '../../images/noimg.png';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [consistPerformers, setConsistPerformers] = useState([]);\n\n  useEffect(() => {\n    getData(optionsCastByID(movieId))\n      .then(cast => cast.cast)\n      .then(cast =>\n        cast.map(({ id, original_name, profile_path, character }) => ({\n          id,\n          original_name,\n          profile_path,\n          character,\n        }))\n      )\n      .then(cast => setConsistPerformers(cast));\n  }, [movieId]);\n\n  return (\n    <BlokCast>\n      {consistPerformers.length > 0 ? (\n        <div>\n          {consistPerformers.map(\n            ({ id, original_name, profile_path, character }) => {\n              return (\n                <GalleryCast key={id}>\n                  {profile_path !== null ? (\n                    <Profile\n                      src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                      alt={original_name}\n                    />\n                  ) : (\n                    <Profile src={noimage} alt={original_name} />\n                  )}\n                  <li>\n                    <a\n                      href={`https://en.wikipedia.org/wiki/${original_name}`}\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      {original_name}\n                    </a>\n                  </li>\n                  {/* <li>{original_name}</li> */}\n                  <p>Character: {character}</p>\n                </GalleryCast>\n              );\n            }\n          )}\n        </div>\n      ) : (\n        <div>\n          <h2>We don't have cast for this movie.</h2>\n        </div>\n      )}\n    </BlokCast>\n  );\n};\nexport default Cast;\n\nCast.propTypes = {\n  id: PropTypes.number,\n  original_name: PropTypes.string,\n  profile_path: PropTypes.string,\n  character: PropTypes.string,\n};\n// return (\n//   <BlokCast>\n//     {consistPerformers.map(({ id, original_name, profile_path, character }) => {\n//       return (\n//         <GalleryCast key={id}>\n//           {profile_path !== null ? (\n//             <Profile\n//               src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n//               alt={original_name}\n//             />\n//           ) : (\n//             <Profile src={noimage} alt={original_name} />\n//           )}\n\n//           <li>{original_name}</li>\n//           <p>Character: {character}</p>\n//         </GalleryCast>\n//       );\n//     })}\n//   </BlokCast>\n// );\n","import axios from 'axios';\n\nexport default async function getData(options) {\n  try {\n    const data = await axios.request(options).then(response => {\n      return response.data;\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","const BASE__URL = 'https://api.themoviedb.org/3';\nconst optionsDefault = {\n  method: 'GET',\n  params: { language: 'en-US' },\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiZjc0YjdkOTk5OTdiNWYzYzQ0MGY3YTgxMzBmZGE1NCIsInN1YiI6IjY0NmYwODk2MTdjNDQzMDBhOWVkYWQ4MSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.XtyRL4EwN0GuyLC3DZJht20wxfHDS1peFCSQYFLhH6Q',\n  },\n};\n// search trend movies\nexport const optionsTrendMovies = {\n  ...optionsDefault,\n  url: `${BASE__URL}/trending/movie/day`,\n};\n//search for ID\n\nexport const optionsMovieByID = movieId => ({\n  ...optionsDefault,\n  url: `${BASE__URL}/movie/${movieId}`,\n});\n\n// search for name\n\nexport const optionsSearchQuery = query => ({\n  ...optionsDefault,\n  url: `${BASE__URL}/search/movie`,\n  params: {\n    query: `${query}`,\n    page: '1',\n    language: 'en-US',\n  },\n});\n\n// cast - artist\n\nexport const optionsCastByID = movieId => ({\n  ...optionsDefault,\n  url: `${BASE__URL}/movie/${movieId}/credits`,\n});\n\n//reviews\n\nexport const optionsReviewsByID = movieId => ({\n  ...optionsDefault,\n  url: `${BASE__URL}/movie/${movieId}/reviews`,\n  params: { language: 'en-US', page: '1' },\n});\n"],"names":["BlokCast","styled","GalleryCast","Profile","movieId","useParams","useState","consistPerformers","setConsistPerformers","useEffect","getData","optionsCastByID","then","cast","map","id","original_name","profile_path","character","length","src","alt","href","target","rel","options","axios","response","data","console","error","BASE__URL","optionsDefault","method","params","language","headers","accept","Authorization","optionsTrendMovies","url","optionsMovieByID","optionsSearchQuery","query","page","optionsReviewsByID"],"sourceRoot":""}